=pod

=head1 NAME

Dist::Zilla::Plugin::TwitterBootstrap - Include a customized Twitter Bootstrap in your distribution

=head1 VERSION

version 0.01

=head1 SYNOPSIS

 [TwitterBootstrap]
 js_include  = *
 css_include = *
 img_include = *

=head1 DESCRIPTION

=head1 ATTRIBUTES

=head2 js_include

Which jQuery plugins to include.  This attribute is considered before
C<js_exclude>.  You can use C<*> to include all available plugins.

=head2 js_exclude

Which jQuery plugins to exclude.  This attribute will remove any plugin
that would otherwise have been included with juts the C<js_include> attribute.
For example, to include all plugins, EXCEPT for Transitions:

 [TwitterBootstrap]
 js_include = *
 js_exclude = bootstrap-transition.js

=head2 css_include

Which CSS components to include.  This attribute is considered before
C<css_exclude>.  You can use C<*> to include all available components.

=head2 css_exclude

Which CSS components to exclude.  This attribute will remove any components
that would otherwise have been included with just the C<css_include> attribute.

=head2 img_include

Which images to include.  This attribute is considered before C<img_exclude>.
You can ues C<*> to include all available images.

=head2 img_exclude

Which images to exclude.  This attribute will remove any images that would
otherwise have been included with just the C<img_include> attribute.

=head2 vars

Which variables to override.

=head2 dir

Which directory to put jQuery into.  Defaults to public under
the same location of your main module, so if your module is 
Foo::Bar (lib/Foo/Bar.pm), then the default dir will be 
lib/Foo/Bar/public.

=head2 location

Where to put jQuery.  Choices are:

=over 4

=item build

This puts jQuery in the directory where the dist is currently
being built, where it will be incorporated into the dist.

=item root

This puts jQuery in the root directory (The same directory
that contains F<dist.ini>).  It will also be included in the
built distribution.

=back

=head2 cache

Whether and where to cache custom bootstraps.  This value is
passed directly into the same attribute of 
L<WebService::TwitterBootstrap::Download::Custom>, so see that
modules documentation for details, but briefly here are the 
values you can specify:

=over 4

=item * 0 (zero)

Turn off caching

=item * 1 (one)

Turn on caching, using the default caching location.

=item * directory path

Use the given path as the cache directory.

=back

=head1 METHODS

=head2 $plugin-E<gt>gather_files

This method downloads the appropriate files from the Internet (or
retrieves them from the cache) and places them in the location 
specified by the configuration.

=head1 CLASS METHODS

=head2 Dist::Zilla::Plugin::TwitterBootstrap->default_customization

Prints to standard out the default customization as found on the Twitter
Bootstrap website.  You can use this by appending it to your C<dist.ini>.

 % perl -MDist::Zilla::Plugin::TwitterBootstrap \
   -E 'Dist::Zilla::Plugin::TwitterBootstrap->default_customization' \
   > dist.ini

=head2 Dist::Zilla::Plugin::TwitterBootstrap->mvp_multivalue_args

Returns list of attributes that can be specified multiple times.  Can
also be called as an instance method.

=head1 AUTHOR

Graham Ollis <plicease@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2012 by Graham Ollis.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

